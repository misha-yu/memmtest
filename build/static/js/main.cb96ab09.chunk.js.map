{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","products","product","name","price","server_urll","getProducts","_","fetch","_this","then","response","json","setState","data","catch","err","console","error","addProduct","concat","renderProduct","_ref","product_id","react_default","a","createElement","key","this","_this2","_this$state","className","map","value","onChange","e","Object","objectSpread","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCyDzBC,0NAnDfC,MAAS,CACPC,SAAW,GACXC,QAAS,CACPC,KAAM,iBACNC,MAAO,OASXC,YAAc,uCAEdC,YAAc,SAAAC,GACZC,MAAMC,EAAKJ,YAAc,aACxBK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAQ,OAAIF,EAAKI,SAAS,CAAEZ,SAAUU,EAASG,SACpDC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAG9BG,WAAa,SAAAZ,GAAK,IACTL,EAAWO,EAAKT,MAAhBE,QACPM,MAAMC,EAAKJ,YAAL,sBAAAe,OAAyClB,EAAQC,KAAjD,WAAAiB,OAA+DlB,EAAQE,QAC5EM,KAAKD,EAAKH,aACVS,MAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,QAG5BK,cAAgB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,WAAYpB,EAAdmB,EAAcnB,KAAd,OAAwBqB,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,GAAapB,uFApB/DyB,KAAKtB,+CAsBI,IAAAuB,EAAAD,KAAAE,EACqBF,KAAK5B,MAA1BC,EADA6B,EACA7B,SAAUC,EADV4B,EACU5B,QACjB,OACEsB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACZ9B,EAAS+B,IAAIJ,KAAKP,eACnBG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACAO,MAAO/B,EAAQC,KACf+B,SAAW,SAAAC,GAAC,OAAIN,EAAKhB,SAAS,CAAEX,QAAQkC,OAAAC,EAAA,EAAAD,CAAA,GAAKlC,EAAN,CAAeC,KAAMgC,EAAEG,OAAOL,aACrET,EAAAC,EAAAC,cAAA,SACAO,MAAO/B,EAAQE,MACf8B,SAAW,SAAAC,GAAC,OAAIN,EAAKhB,SAAS,CAAEX,QAAQkC,OAAAC,EAAA,EAAAD,CAAA,GAAKlC,EAAN,CAAeE,MAAO+B,EAAEG,OAAOL,aAEtET,EAAAC,EAAAC,cAAA,UAAQa,QAASX,KAAKT,YAAtB,wBA9CQqB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.cb96ab09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\nstate  = {\n  products : [],\n  product: {\n    name: 'sample product',\n    price: 20\n  }\n}\n\ncomponentDidMount(){\n  this.getProducts();\n}\n\n//server_urll = \"http://localhost:5000\";\nserver_urll = \"https://memm-heroku.herokuapp.com/\";\n\ngetProducts = _ => {\n  fetch(this.server_urll + '/products')\n  .then(response => response.json())\n  .then(response => this.setState({ products: response.data }))\n  .catch(err => console.error(err))\n  }\n\naddProduct = _ => {\n  const {product} = this.state;\n  fetch(this.server_urll + `/products/add?name=${product.name}&price=${product.price}`)\n  .then(this.getProducts)\n  .catch(err => console.error(err))\n}\n\n  renderProduct = ({product_id, name}) => <div key={product_id}>{name}</div>\n\n  render() {\n    const {products, product} = this.state;\n    return (\n      <div className=\"App\">\n        {products.map(this.renderProduct)}\n        <div>\n          <input \n          value={product.name} \n          onChange={ e => this.setState({ product: {...product, name: e.target.value} })}/>\n          <input \n          value={product.price} \n          onChange={ e => this.setState({ product: {...product, price: e.target.value} })}\n          />\n          <button onClick={this.addProduct}>ADD PRODUCT</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}